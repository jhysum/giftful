-- Create users table
CREATE TABLE IF NOT EXISTS users (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create contacts table
CREATE TABLE IF NOT EXISTS contacts (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name TEXT NOT NULL,
  relationship_type TEXT NOT NULL,
  interests TEXT,
  image_url TEXT,
  user_id TEXT NOT NULL REFERENCES users(user_id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create important_dates table
CREATE TABLE IF NOT EXISTS important_dates (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  contact_id BIGINT NOT NULL REFERENCES contacts(id),
  event_type TEXT NOT NULL,
  date DATE NOT NULL,
  user_id TEXT NOT NULL REFERENCES users(user_id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create gift_suggestions table
CREATE TABLE IF NOT EXISTS gift_suggestions (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  contact_id BIGINT NOT NULL REFERENCES contacts(id),
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  price NUMERIC NOT NULL,
  is_favorite BOOLEAN DEFAULT FALSE,
  user_id TEXT NOT NULL REFERENCES users(user_id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security (RLS)
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE important_dates ENABLE ROW LEVEL SECURITY;
ALTER TABLE gift_suggestions ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own data" ON users;
DROP POLICY IF EXISTS "Users can insert their own data" ON users;
DROP POLICY IF EXISTS "Users can update their own data" ON users;
DROP POLICY IF EXISTS "Users can view their own contacts" ON contacts;
DROP POLICY IF EXISTS "Users can insert their own contacts" ON contacts;
DROP POLICY IF EXISTS "Users can update their own contacts" ON contacts;
DROP POLICY IF EXISTS "Users can delete their own contacts" ON contacts;
DROP POLICY IF EXISTS "Users can view their own important dates" ON important_dates;
DROP POLICY IF EXISTS "Users can insert their own important dates" ON important_dates;
DROP POLICY IF EXISTS "Users can update their own important dates" ON important_dates;
DROP POLICY IF EXISTS "Users can delete their own important dates" ON important_dates;
DROP POLICY IF EXISTS "Users can view their own gift suggestions" ON gift_suggestions;
DROP POLICY IF EXISTS "Users can insert their own gift suggestions" ON gift_suggestions;
DROP POLICY IF EXISTS "Users can update their own gift suggestions" ON gift_suggestions;
DROP POLICY IF EXISTS "Users can delete their own gift suggestions" ON gift_suggestions;

-- Create policies for users table
CREATE POLICY "Users can view their own data"
  ON users FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Service role can insert users"
  ON users FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Users can update their own data"
  ON users FOR UPDATE
  USING (auth.uid()::text = user_id);

-- Create policies for contacts table
CREATE POLICY "Users can view their own contacts"
  ON contacts FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert their own contacts"
  ON contacts FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update their own contacts"
  ON contacts FOR UPDATE
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can delete their own contacts"
  ON contacts FOR DELETE
  USING (auth.uid()::text = user_id);

-- Create policies for important_dates table
CREATE POLICY "Users can view their own important dates"
  ON important_dates FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert their own important dates"
  ON important_dates FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update their own important dates"
  ON important_dates FOR UPDATE
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can delete their own important dates"
  ON important_dates FOR DELETE
  USING (auth.uid()::text = user_id);

-- Create policies for gift_suggestions table
CREATE POLICY "Users can view their own gift suggestions"
  ON gift_suggestions FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert their own gift suggestions"
  ON gift_suggestions FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update their own gift suggestions"
  ON gift_suggestions FOR UPDATE
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can delete their own gift suggestions"
  ON gift_suggestions FOR DELETE
  USING (auth.uid()::text = user_id); 